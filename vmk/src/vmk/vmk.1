.TH vmk 1

.SH NAME
vmk - Makefile maker for VHDL source

.SH SYNTAX
vmk [options] {filename}

.SH DESCRIPTION
\fIvmk\fP peruses a collection of VHDL source files,
determines the analysis order dependencies
and produces a makefile for all the library units found in
all the files examined.
The generated makefile can be targetted toward any existing
commercial VHDL toolset.
.LP
Since \fIvmk\fP does not perform a complete analysis of the source files,
certain conditions must be met in order for the dependencies to be
correctly deduced.
.LP
\fIvmk\fP is VHDL-93 compatible.

.SH OPTIONS
.\"
.IP -a
When generating a configuration file, configure all instances of a
component at once using a "for all:..." configuration item.  If
different instances of the same component are configured differently,
one configuration will be picked at random.  By default, each instance
is configured separately.
.\"
.IP -b soft|hard
Specifies soft or hard binding dependencies.
By default, all toolsets use soft binding except Synopsys's VSS
and Cadence's Leapfrog.
A hard dependecy is a dependency between an architecture and
a lower-level architecture when configured in the higher
level architecture.
The LRM states that the top-level architecture should only
depend on the entiry configured to.
.\"
.IP "-C [lib.]ent+arch"
Generate a configuration unit with the specified entity and
architecture as top-level in a file named "\fIentName\fP_cfg.vhd".
Existing configuration specifications in architectures are ignored and
only default configurations are assumed.  If the \fI-u\fP option is
used, configuration to a configuration unit of a visible entity with
the same name as the component will take precedence over default
configuration.  If a default configuration cannot be found for a
component, the instance is left open.  The generated configuration
unit is included in the generated makefile and is assumed to be
analyzed in the same library as the top-level entity being configured.
The pattern for the generated configuration filename and unit name can
be changed using the \fIconfigfile\fP directive in an rc file.
Implies the '-d' option.
.\"
.IP "-d"
Issue a warning if a default configuration cannot be found
for a component instantiation.
.\"
.IP "-D"
Print a dictionary of the timestamp filenames with their corresponding
library unit names in the file \fIStmpDict.vmk\fP.
Some entries may be duplicated.
On Unix systems, use the command "sort StmpDict.vmk | uniq" to
remove duplicated entries.
.\"
.IP "-f fname"
Specifies the name of a file containing the names of VHDL source files
included in the work library.
More than one \fB-f\fP option can be specified.
VHDL source file names can be specified using a mix of \fB-f\fP options
and specifications on the command line.
File names are specified one per line and blank spaces are ignored.
Relative path names are considered relative to the location of the file list
except if they start with an '@' character, in which case they will
be interpreted as-is.
Comments start with a '#' and end at the end of the line.
File lists can include other file lists by using the
\'#include "filename"\' directive.
If the included filename is specified using a relative path name,
the path name is considered relative to location of the file list
except if it starts with an '@' character.
.\"
.IP "-F fname"
Specifies the name of a file containing the names of VHDL libraries
and associated source files.
More than one \fB-F\fP option can be specified.
This option implies the \fI-l\fP option
as all library names encountered are included in the makefile.
Library and file names are specified one per line and blank spaces are ignored.
Filnames may be followed by additional analyzer command-line arguments.
.sp
e.g.:
.nf
          MYLIB   foo.vhd
          MYLIB   foo_a.vhd       -vital
          HERLIB  fifo_e.vhd
          HERLIB  fifo_a.vhd      -93
          HERLIB  fifo_pkg.vhd
          HISLIB  top.vhd
.fi
.sp
Relative path names are considered relative to the location of the file list
except if they start with an '@' character, in which case they will
be interpreted as-is.
Any line not starting with a letter is ignored.
.\"
.IP "-h"
Display the usage information only.
.\"
.IP "-H"
By default, list all known toolsets.
If the \fI-t\fP option has also been specified,
display all known information about the specified toolset.
.sp
Example: vmk -t msim -H
.\"
.IP "-i"
Display the list of non-top level targets.
By default, only the top-level targets are displayed.
.\"
.IP "-l \fIlib\fP"
Include specified library in the makefile.
Use when generating a makefile for a library other than WORK
or to include more than one library in a makefile.
The \fI-l\fP option can be specified more than once.
The named library must be defined in a \fIrc\fP file.
To include all known libraries into a single generated makefile,
specify \fI-l all\fP.
\"
.IP "-L"
Use short timestamp filenames
if the architecture does not support long filenames.
All makefiles for libraries with cross-dependencies
must also use short timestamp filenames.
Collisions may occur.
.\"
.IP -m
Print the list of known libraries and their mapping as defined
in the rc files that were loaded.
Also print the list of aliased logical library names.
The makefile is not produced.
.\"
.IP -M
Identical to the \fI-m\fP option but lists
all files specified as part of each library.
The makefile is not produced.
.\"
.IP -n
Do not produce any elaboration or simulation targets.
This is sometimes useful when only the compilation phase is
of interest as sometimes large models can produce huge makefiles
because of the number of runtime dependencies.
.\"
.IP -N
Do not produce a makefile.
Identical to specifying '-o /dev/null'.
.\"
.IP "-o \fIfname\fP"
Output makefile in the specified file.
By default, the makefile is produced on the standard output.
.\"
.IP "-O"
Output makefile in the file "Makefile.\fItoolset\fP" where \fItoolset\fP
is the abbreviated toolset identifier of the selected toolset as described
under the '-t' option.
.\"
.IP "-q \fIsname\fP"
Query the library unit that corresponds to the specified stamp filename.
The stamp filename must be specified without the directory path and is
case sensitive.
"?unknown unit?" is printed when no unit corresponds to the specified stamp
filename.
It may be due to a syntax error in the filename or because the source
file containing the reference to or declaration of the unit was not
loaded.
There can be more than on -q option specified.
The makefile is still produced.
.RS
.LP
Example: vmk -q ALKJH78H.G43 -o /dev/null *.vhd
.RE
.\"
.IP "-Q \fIfname\fP"
Generate a "consequence" makefile.
A consequence makefile contains the reverse dependencies
from the normal makefile and can be used to know
which files will be affected by a change in a specified file.
To know the consequences of modifying file a/b/foo.vhd,
use the commands
.RS
.LP
.nf
% vmk ... -Q makefile.csq ...
% make -f makefile.csq a/b/foo.vhd
.fi
.RE
.\"
.IP "-r \fIfname\fP"
Immediately process the specified rc file.  Settings in the rc file
may override settings from previously processed rc files or previous
command line options.
.\"
.IP -S \fIsuffix\fP
Append the specified suffix to the name of the stamp file sub-directory.
Useful when the same toolset and source tree is used from different platforms.
The length of the suffix is limited to 16 characters.
This option has been superceeded by the \fIstampdir\fP directive
in rcfiles.
.\"
.IP "-t \fItoolset\fP"
Deduce dependencies and analysis commands for the specified toolset.
Predefined toolsets are:
.RS
.IP dc
Synopsys Design Compiler
.IP dx
Dasix
.IP iks
Ikos Voyager
.IP lf
LeapFrog
.IP m1076
Mentor System 1076
.IP msim
ModelSim for Unix
.IP mtu
Model Technology for Unix
.IP mtw
Model Technology for Windows
.IP nc
NC-VHDL (Inca)
.IP qck
Mentor QuickVHDL
.IP qh
Mentor QuickHDL
.IP rr
Racal-Redac
.IP sc
Synopsys Scirocco
.IP vl
ViewLogic
.IP vas
Vantage Analysis Spreadsheet
.IP vss
Synopsys VSS
.IP vul
Veda's Vulcan
.IP xl
VHDL-XL
.RE
.IP
A different timestamp directory is used for each toolset
so more than one can be used in parallel on the same source files.
This option replaces all previously specified commands and options
with the default commands and options for the specified toolset.
\"
.IP "-T"
Consider all architectures and configurations as potential top-level units.
By default, only architectures and configurations of port-less entities
are considered as potential top-level units.
.\"
.IP -u
When generating a configuration unit, configure to configuration units
of entities when possible.  By default, only default configurations to
architectures of entities are used.
.\"
.IP -v
Display version number and licensing information only.
The makefile is not produced.
.\"
.IP -V
Infer unknown references as references to Verilog modules.
The toolset used must have a verilog command defined.
.\"
.IP "-w \fIlibrary\fP"
Declare the logical library to be another name for the WORK library.
This option is required to properly identify all dependencies
if the explicit library logical name is used instead of 'WORK'
in the VHDL source files. For example:
.sp
.nf
library CHIP;
use CHIP.PKG.all;
.fi
.sp
The option '-w CHIP' is required if 'CHIP' is the current working library.
This option is also required if the '%w' or '%W' placeholder is used
in the user-specified commands or stamp directory.

.SH RC FILES
Configuration files can be used to provide run-time information to
\fIvmk\fP.  Before processing the command-line options, \fIvmk\fP
looks for and processes 3 rc files in the following order: the file
specified in the VMKRC environment variable, the file \fI.vmkrc\fP in
the user's home directory (as specified by the HOME environment
variable) and the file \fI.vmkrc\fP in the current working directory.
.LP
In the event of conflicting configuration settings in rc files,
the setting from the last rc file read takes precedence.
Settings from the command line override any setting from rc files.
.LP
The rc files are free-format files with blank-separated keywords.
Keywords containing blank spaces can be enclosed between double quotes.
Double quotes can be included in quoted keywords by doubling them.
.ce 1
e.g. "keyword with a quote "" and spaces".
.LP
If pathnames are specified as relative, they will be interpreted
as relative to the location of the rc file containing the
specification and corrected to reflect the current working
directory
e.g. file "../foo" specified in rc file ../.vmkrc will
be corrected to "../../foo".
The relocation of relative pathnames can be prevented by prepending
an '@' at the start of the pathname which will be taken as-is.
e.g. file "@../foo" specified in rc file ../.vmkrc will
be interpreted as "../foo".
.LP
Specified pathnames can contain environment variables.
Environment variables to be replaced are denoted by a '$' and may
be optionally enclosed between "{}" if they 
are not delimited by a non-alphanumeric character.
Two specify a single '$', escape it by using '$$'. e.g.:
.ce 3
$VMKHOME/lib/vmkrc
/home/${MOUNT_POINT}a1/here
/the/dollar$$sign/is/escaped
.LP
The recognized directives are:

.IP "toolset <toolset>"
Specify the toolset to use to deduce dependencies and analysis commands.
Currently, the following <toolset> are predefined:
.RS
.IP dasix
Dasix
.IP dc_shell
Synopsys Design Compiler
.IP leapfrog
LeapFrog
.IP modelsim
ModelSim for Unix
.IP inca
NC-VHDL (Inca)
.IP racal-redac
Racal-Redac
.IP viewlogic
ViewLogic
.IP vantage
Vantage Analysis Spreadsheet
.IP scirocco
Synopsys Scirocco
.IP synopsys
Synopsys VSS
.IP system1076
Mentor System 1076
.IP quickvhdl
Mentor QuickVHDL
.IP quickhdl
Mentor QuickHDL
.IP vhdl-xl
VHDL-XL
.IP voyager
Ikos Voyager
.IP vulcan
Veda's vulcan
.RE
This directive replaces all previously specified commands and options
with the default commands and options for the specified toolset.
See the \fItooldef\fP directive to define or replace the definition
of a toolset.

.IP "tooldef <fullname> <abbrev> <descr> hard|soft \\ "
.nf
<analyze-in-work-command> \\
[<verilog-in-work-command>] \\
[<elab-arch-in-work-command> <elab-conf-in-work-command>] \\
<sim-arch-in-work-command> <sim-conf-in-work-command> \\
<analyze-in-lib-command> \\
[<verilog-in-lib-command>] \\
[<elab-arch-in-lib-command> <elab-conf-in-lib-command>] \\
<sim-arch-in-lib-command> <sim-conf-in-lib-command>"
.fi
.sp
Define a new toolset with default VHDL analysis, verilog (optional),
elaboration (optional) and simulation commands.
\fIfullname\fP is the toolset identifier used in the \fItoolset\fP directive.
If the specified fullname is the same as a previously defined toolset,
the new toolset hides the previously defined one.
\fIabbrev\fP is the toolset identifier used in the \fI-t\fP option.
If the specified abbreviation is the same as a previously defined toolset,
the new toolset hides the previously defined one.
\fIdescr\fP is the toolset description given by the \fI-H\fP option.
See the \fIbinding\fP directive for a description of \fIhard\fP
and \fIsoft\fP. This value should usually be \fIsoft\fP.
The "in-work" commands are the command used in single-library mode.
The "in-lib" commands are the commands used in multi-library mode
and MUST contain a '%w' or '%W' placeholder.
See the \fIanalyze\fP, \fIverilog\fP,
\fIelaborate\fP and \fIsimulate\fP directives
for a description of the command format.
\fBDo not forget to quote commands and descriptions if they contain
white spaces\fP.
.sp
For example, the directive describing the ModelSim toolset would
be specified as follow:
.sp
.nf
tooldef modelsim msim "Model Technology's ModelSim" soft \\
    "vcom -explicit $(ANAFLAGS) %f" \\
    "vlog $(VLOGFLAGS) %p%m.v" \\
    "echo \\"run -all;quit\\" | vsim -c $(SIMFLAGS) %e %a" \\
    "echo \\"run -all;quit\\" | vsim -c $(SIMFLAGS) %c") \\
    "vcom -work %w $(ANAFLAGS) %f" \\
    "vlog -work %w $(VLOGFLAGS) %p%m.v" \\
    "echo \\"run -all;quit\\" | vsim -c -lib %w $(SIMFLAGS) %e %a" \\
    "echo \\"run -all;quit\\" | vsim -c -lib %w $(SIMFLAGS) %c"
    
.fi

.IP "preprocess <command>"
Specify a command to use to preprocess all source files,
before parsing them to determine dependencies,
replacing any instance of '%f' with the name of the file to be preprocessed
and '%%' with a single '%' character.
The analysis command should perform a similar preprocessing.
By default, no preprocessing is done.
.sp
Example: preprocess "cpp -E %f | egrep -v \\^\\#"

.IP "analyze <command>"
Replace the command used to analyze all VHDL source files in
the currently selected toolset with the specified command.
When used, any instance of
\'%f' is replaced with the name of the file to be analyzed,
\'%w' is replaced with the lowercase name of the current working
library as specified by a single '-w' option,
\'%W' is replaced with the uppercase name of the current working
library as specified by a single '-w' option,
and '%%' is replaced with a single '%' character.
.sp
Example: analyze "vcom -explicit -93 $(VCOM_FLAGS) %f"

.IP "verilog <command>"
Replace the command used to compile all Verilog source files in
the currently selected toolset with the specified command.
When used, any instance of
\'%p' is replaced with the path to the library containing the source code
including a final '/',
\'%m' is replaced with the lowercase name of the module to be analyzed,
\'%M' is replaced with the uppercase name of the module to be analyzed,
\'%w' is replaced with the lowercase name of the current working
library as specified by a single '-w' option,
\'%W' is replaced with the uppercase name of the current working
library as specified by a single '-w' option,
and '%%' is replaced with a single '%' character.
.sp
Example: verilog "vlog $(VLOGFLAGS) %p%M.v"

.IP "elaborate architecture <command>"
Replace the command used to elaborate an architecture
in the currently selected toolset with the specified command.
When used, any instance of
\'%w' is replaced with the lowercase name of the current working library,
\'%W' is replaced with the uppercase name of the current working library,
\'%e' is replaced with the name of the entity to be elaborated,
\'%a' is replaced with the name of the architecture to be elaborated
and '%%' is replaced with a single '%' character.
This directive is only applicable if you the toolset you are using
requires an explicit elaboration phase.
.sp
Example: elaborate architecture "ev %e:%a"

.IP "elaborate configuration <command>"
Replace the command used to elaborate a configuration
in the currently selected toolset with the specified command.
When used, any instance of
\'%w' is replaced with the lowercase name of the current working library,
\'%W' is replaced with the uppercase name of the current working library,
\'%c' is replaced with the name of the configuration to be elaborated,
and '%%' is replaced with a single '%' character.
This directive is only applicable if you the toolset you are using
requires an explicit elaboration phase.
.sp
Example: elaborate configuration "ev %c"

.IP "simulate architecture <command>"
Replace the command used to simulate an architecture
in the currently selected toolset with the specified command.
When used, any instance of
\'%w' is replaced with the lowercase name of the current working library,
\'%W' is replaced with the uppercase name of the current working library,
\'%e' is replaced with the name of the entity to be simulated,
\'%a' is replaced with the name of the architecture to be simulated
and '%%' is replaced with a single '%' character.
.sp
Example: simulate architecture "sim_script %e %a"

.IP "simulate configuration <command>"
Replace the command used to simulate a configuration
in the currently selected toolset with the specified command.
When used, any instance of
\'%w' is replaced with the lowercase name of the current working library,
\'%W' is replaced with the uppercase name of the current working library,
\'%c' is replaced with the name of the configuration to be simulated,
and '%%' is replaced with a single '%' character.
.sp
Example: simulate configuration "runsim -l %c.log %c"

.IP "vmkrc <filename>"
Specifies the name of another rc file to read.
The specified file is read immediately.

.IP "header <filename>"
Specifies the name of the file to use as the header of the makefile.
Used to specify standard usage, copyright, RCS, or SCCS notices.

.IP "include1 <filename>"
Specifies the name of the file to include at the very top of the makefile.
Used to specify a default target or macros.
.IP "include2 <filename>"
Specifies the name of the file to include at before the dependency rules
in the makefile.
Used to redefine macros or add targets.
.IP "include3 <filename>"
Specifies the name of the file to include at the very end of the makefile.
Used to add additional rules to the makefile.

.IP "library <name> <directory> [pattern]"
Specifies the directory that contains the files for the units in
a VHDL logical library and the pattern for the source files.
The pattern for the source file is relative to the library path
and defaults to '*.vhd'.
The name of the VHDL logical library is not case-sensitive.
If a library is not included in a makefile,
\fIvmk\fP must have been used to build the units in that library.
.sp
Example: library MYLIB ../mylib "rtl/*.vhd rams/*.vhd"

.IP "alias <alias> <library>"
Declare the specified logical name as being another name for the
specified logical library library.

.IP "work <library>"
Declare the specified logical library as being another name for the
WORK library.
Ignored if multiple libraries are included in the makefile.

.IP "bindings soft | hard"
Specifies soft or hard binding dependencies.
By default, all toolsets use soft binding except Synopsys's VSS
and Cadence's Leapfrog and NC-VHDL.

.IP "xrefieee on | off"
Specifies if any dependencies to library units in the IEEE library
will be included in the Makefile or not.
By default, dependencies into the IEEE library are ignored.
If included, the IEEE library must also be maintained using VMK.

.IP "shortnames"
Same as -L option.

.IP "stampdir pattern"
Specifies the pattern to be used for the timestamp directory name,
replacing any instance of '%t' with the abbreviated toolset name,
replacing any instance of '%w' with the lowercase name of the current working
library as specified by a single '-w' option,
replacing any instance of '%W' with the uppercase name of the current working
library as specified by a single '-w' option,
and '%%' with a single '%' character.
\fBIt is important that each library has its own stamp directory\fP.
If no '%w' or '%W' marker is specified in the pattern,
".%w" will be implicitely appended.
The path leading to the stamp directory must already exist
and be writeable by the user.
Defaults to ".stamps.%w.%t".

.IP "configfile <filepattern> [unitpattern]"

Specify the pattern to use to infer the name of the file
containing a generated configuration unit,
replacing any instance of
\'%e' with the lowercase name of the entity,
\'%E' with the uppercase name of the entity,
\'%a' with the lowercase name of the architecture,
\'%A' with the uppercase name of the architecture, and '%%' with a
single '%' character.  Overrides the default pattern "%e_cfg.vhd".

Can optionally specify the pattern to use to infer the name of
a generated configuration unit,
replacing any instance of
\'%e' with the lowercase name of the entity,
\'%E' with the uppercase name of the entity,
\'%a' with the lowercase name of the architecture,
\'%A' with the uppercase name of the architecture, and '%%' with a
single '%' character.  Overrides the default pattern "%e_%a_cfg".

.sp
Example: configfile %e-%a.Config.vhd config_%E_to_%a

.SH META COMMENTS
\fIvmk\fP supports meta-comments to provide overrides on a per-file basis.
\fIvmk\fP's meta-comments start with "-- vmk: " and can be located
anywhere in the file (although it is recommended that they be located
at or near to top of the file).
.LP
The following directives can be specified in meta-comments:
.IP "<toolset> analyze <analyze command>
This directive is similar to the "analyze" directive in the rc file.
It overrides the command used to analyze the file for the specified
toolset, replacing instances of '%f' with the file name.
The toolset specifier is the same as in the "toolset" directive
in rc files
and must be separated from the "analyze" keyword by a single space.
The command must not be quoted, even if it includes spaces.
.sp
e.g. -- vmk: modelsim analyze   vcom -93 -explicit %f
.LP
Any unrecognized directive is ignored and no error message is produced.

.SH BINDINGS
When an instanitated component is configured to an entity/architecture
pair within the instantiating architecture using a configuration
statement such as:
.sp
.nf
	for all:C use entity LIB.ENT(ARCH);
.fi
.LP
If bindings are soft, the instantiating architecture will not need to
be re-analyzed if the architecture the instantiated components are
bound to has been re-analyzed more recently. If bindings are hard, the
instantiating architecture will need to be re-analyzed.
.LP
Most toolsets use soft bindings which is the least restrictive; but
a few of them, such as Synopsys's VSS and Cadence's Leapfrog and NC_VHDL,
use hard bindings by default.

.SH RESTRICTIONS
The following conditions must be met for \fIvmk\fP to correctly
identify dependencies:

.IP -
When generating a makefile for the WORK library only,
the files containing all the units in library WORK
(and only the units in library work) must be loaded.
Typically, one would keep all the files pertaining to a single library
in individual directories.

.IP -
Fully qualified names are required for accessing library unit names not
in a library included in the makefile.
If the option \fI-l MYLIB\fP is not used,
the first example below will not work but the second will.
.nf


		library MYLIB;
		use MYLIB.all;
		...
			... use entity MYENT;



		library MYLIB;
			... use entity MYLIB.MYENT;
.fi

.IP -
Architectures must be in the same library as the
entity they specify/configure.

.IP -
Component instantiations must have at least one generic or port binding.

.SH ENVIRONMENT VARIABLES
The following environment variables are used by vmk:
.IP VMKRC
Specifies the pathname of an rc file to load first.
Other rc files can be explicitely loaded by using the '-r' option
or the 'vmkrc' directive in an rc file.

.SH AUTHOR
.nf
Janick Bergeron, <janick@bergeron.com>
(c) Copyright 1996-2007, Janick Bergeron
    Distributed under Apache V2.0 License
.fi
